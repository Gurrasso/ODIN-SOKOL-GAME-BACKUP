package user
import sg "../../sokol/gfx"
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc -i ./src/shaders/shader.glsl -o ./src/user/generated_shader.odin -l glsl430 -f sokol_odin

    Overview:
    =========
    Shader program: 'main':
        Get shader desc: main_shader_desc(sg.query_backend())
        Vertex Shader: vs
        Fragment Shader: fs
        Attributes:
            ATTR_main_pos => 0
            ATTR_main_col => 1
            ATTR_main_uv => 2
            ATTR_main_bytes0 => 3
    Bindings:
        Uniform block 'Uniforms_Data':
            Odin struct: Uniforms_Data
            Bind slot: UB_Uniforms_Data => 0
        Image 'tex':
            Image type: ._2D
            Sample type: .FLOAT
            Multisampled: false
            Bind slot: IMG_tex => 0
        Sampler 'smp':
            Type: .FILTERING
            Bind slot: SMP_smp => 0
*/
ATTR_main_pos :: 0
ATTR_main_col :: 1
ATTR_main_uv :: 2
ATTR_main_bytes0 :: 3
UB_Uniforms_Data :: 0
IMG_tex :: 0
SMP_smp :: 0
Uniforms_Data :: struct #align(16) {
    using _: struct #packed {
        model_matrix: Mat4,
        view_matrix: Mat4,
        projection_matrix: Mat4,
        scz: [2]f32,
        reverse_screen_y: i32,
        _: [4]u8,
        lights_pos: [16][4]f32,
    },
}
/*
    #version 430

    struct Uniforms_Data
    {
        mat4 model_matrix;
        mat4 view_matrix;
        mat4 projection_matrix;
        vec2 scz;
        int reverse_screen_y;
        vec4 lights_pos[16];
    };

    uniform Uniforms_Data _23;

    layout(location = 0) in vec3 pos;
    layout(location = 0) out vec4 color;
    layout(location = 1) in vec4 col;
    layout(location = 1) out vec2 texcoord;
    layout(location = 2) in vec2 uv;
    layout(location = 2) out vec4 bytes;
    layout(location = 3) in vec4 bytes0;
    layout(location = 3) out vec2 screen_size;
    layout(location = 4) out vec4 lights[16];

    vec2 world_to_screen_pos(vec2 pos_1)
    {
        vec4 _42 = (_23.projection_matrix * _23.view_matrix) * vec4(pos_1.x, pos_1.y, 0.0, 1.0);
        float _48 = _42.w;
        return ((vec2(_42.x / _48, ((-_42.y) * float(_23.reverse_screen_y)) / _48) * 0.5) + vec2(0.5)) * _23.scz;
    }

    void main()
    {
        gl_Position = ((_23.projection_matrix * _23.view_matrix) * _23.model_matrix) * vec4(pos, 1.0);
        color = col;
        texcoord = uv;
        bytes = bytes0;
        screen_size = _23.scz;
        vec4 lights_pos0[16];
        for (int i = 0; i < 16; i++)
        {
            vec2 param = _23.lights_pos[i].xy;
            vec2 _139 = world_to_screen_pos(param);
            lights_pos0[i].x = _139.x;
            lights_pos0[i].y = _139.y;
            lights_pos0[i].w = _23.lights_pos[i].w;
            lights_pos0[i].z = _23.lights_pos[i].z;
        }
        lights = lights_pos0;
    }

*/
@(private="file")
vs_source_glsl430 := [1367]u8 {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x33,0x30,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5f,0x44,0x61,
    0x74,0x61,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x6d,0x6f,
    0x64,0x65,0x6c,0x5f,0x6d,0x61,0x74,0x72,0x69,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x6d,0x61,0x74,0x34,0x20,0x76,0x69,0x65,0x77,0x5f,0x6d,0x61,0x74,0x72,0x69,0x78,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x70,0x72,0x6f,0x6a,0x65,
    0x63,0x74,0x69,0x6f,0x6e,0x5f,0x6d,0x61,0x74,0x72,0x69,0x78,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x73,0x63,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x69,0x6e,0x74,0x20,0x72,0x65,0x76,0x65,0x72,0x73,0x65,0x5f,0x73,0x63,0x72,0x65,
    0x65,0x6e,0x5f,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x6c,
    0x69,0x67,0x68,0x74,0x73,0x5f,0x70,0x6f,0x73,0x5b,0x31,0x36,0x5d,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x55,0x6e,0x69,0x66,0x6f,
    0x72,0x6d,0x73,0x5f,0x44,0x61,0x74,0x61,0x20,0x5f,0x32,0x33,0x3b,0x0a,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x6f,0x73,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x63,
    0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,
    0x63,0x34,0x20,0x63,0x6f,0x6c,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x6f,0x75,0x74,
    0x20,0x76,0x65,0x63,0x32,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x32,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x62,
    0x79,0x74,0x65,0x73,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x33,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,
    0x63,0x34,0x20,0x62,0x79,0x74,0x65,0x73,0x30,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,
    0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x33,0x29,0x20,
    0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x73,0x63,0x72,0x65,0x65,0x6e,0x5f,
    0x73,0x69,0x7a,0x65,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x34,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,
    0x65,0x63,0x34,0x20,0x6c,0x69,0x67,0x68,0x74,0x73,0x5b,0x31,0x36,0x5d,0x3b,0x0a,
    0x0a,0x76,0x65,0x63,0x32,0x20,0x77,0x6f,0x72,0x6c,0x64,0x5f,0x74,0x6f,0x5f,0x73,
    0x63,0x72,0x65,0x65,0x6e,0x5f,0x70,0x6f,0x73,0x28,0x76,0x65,0x63,0x32,0x20,0x70,
    0x6f,0x73,0x5f,0x31,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,
    0x20,0x5f,0x34,0x32,0x20,0x3d,0x20,0x28,0x5f,0x32,0x33,0x2e,0x70,0x72,0x6f,0x6a,
    0x65,0x63,0x74,0x69,0x6f,0x6e,0x5f,0x6d,0x61,0x74,0x72,0x69,0x78,0x20,0x2a,0x20,
    0x5f,0x32,0x33,0x2e,0x76,0x69,0x65,0x77,0x5f,0x6d,0x61,0x74,0x72,0x69,0x78,0x29,
    0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x70,0x6f,0x73,0x5f,0x31,0x2e,0x78,0x2c,
    0x20,0x70,0x6f,0x73,0x5f,0x31,0x2e,0x79,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,
    0x34,0x38,0x20,0x3d,0x20,0x5f,0x34,0x32,0x2e,0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x28,0x28,0x76,0x65,0x63,0x32,0x28,0x5f,0x34,
    0x32,0x2e,0x78,0x20,0x2f,0x20,0x5f,0x34,0x38,0x2c,0x20,0x28,0x28,0x2d,0x5f,0x34,
    0x32,0x2e,0x79,0x29,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x5f,0x32,0x33,
    0x2e,0x72,0x65,0x76,0x65,0x72,0x73,0x65,0x5f,0x73,0x63,0x72,0x65,0x65,0x6e,0x5f,
    0x79,0x29,0x29,0x20,0x2f,0x20,0x5f,0x34,0x38,0x29,0x20,0x2a,0x20,0x30,0x2e,0x35,
    0x29,0x20,0x2b,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x35,0x29,0x29,0x20,0x2a,
    0x20,0x5f,0x32,0x33,0x2e,0x73,0x63,0x7a,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,
    0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x28,0x28,0x5f,
    0x32,0x33,0x2e,0x70,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x5f,0x6d,0x61,
    0x74,0x72,0x69,0x78,0x20,0x2a,0x20,0x5f,0x32,0x33,0x2e,0x76,0x69,0x65,0x77,0x5f,
    0x6d,0x61,0x74,0x72,0x69,0x78,0x29,0x20,0x2a,0x20,0x5f,0x32,0x33,0x2e,0x6d,0x6f,
    0x64,0x65,0x6c,0x5f,0x6d,0x61,0x74,0x72,0x69,0x78,0x29,0x20,0x2a,0x20,0x76,0x65,
    0x63,0x34,0x28,0x70,0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x63,0x6f,0x6c,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x75,0x76,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x62,0x79,0x74,0x65,0x73,0x20,0x3d,0x20,0x62,0x79,
    0x74,0x65,0x73,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x63,0x72,0x65,0x65,0x6e,
    0x5f,0x73,0x69,0x7a,0x65,0x20,0x3d,0x20,0x5f,0x32,0x33,0x2e,0x73,0x63,0x7a,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x6c,0x69,0x67,0x68,0x74,0x73,
    0x5f,0x70,0x6f,0x73,0x30,0x5b,0x31,0x36,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,0x20,0x69,0x20,0x3d,0x20,0x30,0x3b,0x20,0x69,
    0x20,0x3c,0x20,0x31,0x36,0x3b,0x20,0x69,0x2b,0x2b,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x5f,0x32,0x33,0x2e,0x6c,0x69,0x67,0x68,0x74,
    0x73,0x5f,0x70,0x6f,0x73,0x5b,0x69,0x5d,0x2e,0x78,0x79,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x31,0x33,0x39,0x20,0x3d,
    0x20,0x77,0x6f,0x72,0x6c,0x64,0x5f,0x74,0x6f,0x5f,0x73,0x63,0x72,0x65,0x65,0x6e,
    0x5f,0x70,0x6f,0x73,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x6c,0x69,0x67,0x68,0x74,0x73,0x5f,0x70,0x6f,0x73,0x30,
    0x5b,0x69,0x5d,0x2e,0x78,0x20,0x3d,0x20,0x5f,0x31,0x33,0x39,0x2e,0x78,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6c,0x69,0x67,0x68,0x74,0x73,0x5f,0x70,
    0x6f,0x73,0x30,0x5b,0x69,0x5d,0x2e,0x79,0x20,0x3d,0x20,0x5f,0x31,0x33,0x39,0x2e,
    0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6c,0x69,0x67,0x68,0x74,
    0x73,0x5f,0x70,0x6f,0x73,0x30,0x5b,0x69,0x5d,0x2e,0x77,0x20,0x3d,0x20,0x5f,0x32,
    0x33,0x2e,0x6c,0x69,0x67,0x68,0x74,0x73,0x5f,0x70,0x6f,0x73,0x5b,0x69,0x5d,0x2e,
    0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6c,0x69,0x67,0x68,0x74,
    0x73,0x5f,0x70,0x6f,0x73,0x30,0x5b,0x69,0x5d,0x2e,0x7a,0x20,0x3d,0x20,0x5f,0x32,
    0x33,0x2e,0x6c,0x69,0x67,0x68,0x74,0x73,0x5f,0x70,0x6f,0x73,0x5b,0x69,0x5d,0x2e,
    0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x6c,0x69,0x67,
    0x68,0x74,0x73,0x20,0x3d,0x20,0x6c,0x69,0x67,0x68,0x74,0x73,0x5f,0x70,0x6f,0x73,
    0x30,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
}
/*
    #version 430

    layout(binding = 16) uniform sampler2D tex_smp;

    layout(location = 4) in vec4 lights[16];
    layout(location = 1) in vec2 texcoord;
    layout(location = 2) in vec4 bytes;
    layout(location = 0) in vec4 color;
    layout(location = 0) out vec4 frag_color;
    layout(location = 3) in vec2 screen_size;
    vec4 tex_col;

    vec3 rgb_to_sg_color(vec3 rgb)
    {
        return rgb * vec3(0.0039215688593685626983642578125);
    }

    void update_lighting()
    {
        for (int i = 0; float(i) < lights[0].w; i++)
        {
            vec3 param = vec3(253.0, 255.0, 199.0);
            tex_col += vec4(rgb_to_sg_color(param) * pow(clamp(1.0 - (length(gl_FragCoord.xy - lights[i].xy) / lights[i].z), 0.0, 1.0), 2.0), 0.0);
        }
    }

    void main()
    {
        tex_col = vec4(1.0);
        vec2 _100 = texcoord;
        vec2 _153 = _100;
        _153.y = 1.0 - _100.y;
        int _112 = int(bytes.x * 255.0);
        if (_112 == 0)
        {
            tex_col = texture(tex_smp, _153);
        }
        else
        {
            if (_112 == 1)
            {
                tex_col.w = texture(tex_smp, _100).x;
            }
        }
        tex_col *= color;
        update_lighting();
        frag_color = tex_col;
    }

*/
@(private="file")
fs_source_glsl430 := [1102]u8 {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x33,0x30,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x62,0x69,0x6e,0x64,0x69,0x6e,0x67,0x20,0x3d,0x20,0x31,
    0x36,0x29,0x20,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x32,0x44,0x20,0x74,0x65,0x78,0x5f,0x73,0x6d,0x70,0x3b,0x0a,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x34,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x6c,0x69,0x67,0x68,
    0x74,0x73,0x5b,0x31,0x36,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,
    0x76,0x65,0x63,0x32,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x62,0x79,0x74,0x65,
    0x73,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,
    0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,
    0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x33,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x73,0x63,
    0x72,0x65,0x65,0x6e,0x5f,0x73,0x69,0x7a,0x65,0x3b,0x0a,0x76,0x65,0x63,0x34,0x20,
    0x74,0x65,0x78,0x5f,0x63,0x6f,0x6c,0x3b,0x0a,0x0a,0x76,0x65,0x63,0x33,0x20,0x72,
    0x67,0x62,0x5f,0x74,0x6f,0x5f,0x73,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x76,
    0x65,0x63,0x33,0x20,0x72,0x67,0x62,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,
    0x65,0x74,0x75,0x72,0x6e,0x20,0x72,0x67,0x62,0x20,0x2a,0x20,0x76,0x65,0x63,0x33,
    0x28,0x30,0x2e,0x30,0x30,0x33,0x39,0x32,0x31,0x35,0x36,0x38,0x38,0x35,0x39,0x33,
    0x36,0x38,0x35,0x36,0x32,0x36,0x39,0x38,0x33,0x36,0x34,0x32,0x35,0x37,0x38,0x31,
    0x32,0x35,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x75,0x70,0x64,
    0x61,0x74,0x65,0x5f,0x6c,0x69,0x67,0x68,0x74,0x69,0x6e,0x67,0x28,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,0x20,0x69,0x20,
    0x3d,0x20,0x30,0x3b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x69,0x29,0x20,0x3c,0x20,
    0x6c,0x69,0x67,0x68,0x74,0x73,0x5b,0x30,0x5d,0x2e,0x77,0x3b,0x20,0x69,0x2b,0x2b,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x76,0x65,0x63,
    0x33,0x28,0x32,0x35,0x33,0x2e,0x30,0x2c,0x20,0x32,0x35,0x35,0x2e,0x30,0x2c,0x20,
    0x31,0x39,0x39,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x74,0x65,0x78,0x5f,0x63,0x6f,0x6c,0x20,0x2b,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,
    0x72,0x67,0x62,0x5f,0x74,0x6f,0x5f,0x73,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x28,
    0x70,0x61,0x72,0x61,0x6d,0x29,0x20,0x2a,0x20,0x70,0x6f,0x77,0x28,0x63,0x6c,0x61,
    0x6d,0x70,0x28,0x31,0x2e,0x30,0x20,0x2d,0x20,0x28,0x6c,0x65,0x6e,0x67,0x74,0x68,
    0x28,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x43,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,
    0x20,0x2d,0x20,0x6c,0x69,0x67,0x68,0x74,0x73,0x5b,0x69,0x5d,0x2e,0x78,0x79,0x29,
    0x20,0x2f,0x20,0x6c,0x69,0x67,0x68,0x74,0x73,0x5b,0x69,0x5d,0x2e,0x7a,0x29,0x2c,
    0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x2c,0x20,0x32,0x2e,0x30,0x29,
    0x2c,0x20,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x7d,0x0a,
    0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x74,0x65,0x78,0x5f,0x63,0x6f,0x6c,0x20,0x3d,0x20,0x76,0x65,0x63,
    0x34,0x28,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,
    0x20,0x5f,0x31,0x30,0x30,0x20,0x3d,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x31,0x35,0x33,0x20,
    0x3d,0x20,0x5f,0x31,0x30,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x31,0x35,0x33,
    0x2e,0x79,0x20,0x3d,0x20,0x31,0x2e,0x30,0x20,0x2d,0x20,0x5f,0x31,0x30,0x30,0x2e,
    0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x31,0x31,0x32,0x20,
    0x3d,0x20,0x69,0x6e,0x74,0x28,0x62,0x79,0x74,0x65,0x73,0x2e,0x78,0x20,0x2a,0x20,
    0x32,0x35,0x35,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,
    0x5f,0x31,0x31,0x32,0x20,0x3d,0x3d,0x20,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x74,0x65,0x78,0x5f,0x63,0x6f,0x6c,
    0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x74,0x65,0x78,0x5f,0x73,
    0x6d,0x70,0x2c,0x20,0x5f,0x31,0x35,0x33,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x31,0x32,
    0x20,0x3d,0x3d,0x20,0x31,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x74,0x65,0x78,
    0x5f,0x63,0x6f,0x6c,0x2e,0x77,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x28,0x74,0x65,0x78,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x5f,0x31,0x30,0x30,0x29,0x2e,
    0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x74,0x65,0x78,0x5f,0x63,0x6f,0x6c,0x20,0x2a,
    0x3d,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x70,0x64,
    0x61,0x74,0x65,0x5f,0x6c,0x69,0x67,0x68,0x74,0x69,0x6e,0x67,0x28,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,
    0x20,0x74,0x65,0x78,0x5f,0x63,0x6f,0x6c,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
}
main_shader_desc :: proc (backend: sg.Backend) -> sg.Shader_Desc {
    desc: sg.Shader_Desc
    desc.label = "main_shader"
    #partial switch backend {
    case .GLCORE:
        desc.vertex_func.source = transmute(cstring)&vs_source_glsl430
        desc.vertex_func.entry = "main"
        desc.fragment_func.source = transmute(cstring)&fs_source_glsl430
        desc.fragment_func.entry = "main"
        desc.attrs[0].base_type = .FLOAT
        desc.attrs[0].glsl_name = "pos"
        desc.attrs[1].base_type = .FLOAT
        desc.attrs[1].glsl_name = "col"
        desc.attrs[2].base_type = .FLOAT
        desc.attrs[2].glsl_name = "uv"
        desc.attrs[3].base_type = .FLOAT
        desc.attrs[3].glsl_name = "bytes0"
        desc.uniform_blocks[0].stage = .VERTEX
        desc.uniform_blocks[0].layout = .STD140
        desc.uniform_blocks[0].size = 464
        desc.uniform_blocks[0].glsl_uniforms[0].type = .MAT4
        desc.uniform_blocks[0].glsl_uniforms[0].array_count = 0
        desc.uniform_blocks[0].glsl_uniforms[0].glsl_name = "_23.model_matrix"
        desc.uniform_blocks[0].glsl_uniforms[1].type = .MAT4
        desc.uniform_blocks[0].glsl_uniforms[1].array_count = 0
        desc.uniform_blocks[0].glsl_uniforms[1].glsl_name = "_23.view_matrix"
        desc.uniform_blocks[0].glsl_uniforms[2].type = .MAT4
        desc.uniform_blocks[0].glsl_uniforms[2].array_count = 0
        desc.uniform_blocks[0].glsl_uniforms[2].glsl_name = "_23.projection_matrix"
        desc.uniform_blocks[0].glsl_uniforms[3].type = .FLOAT2
        desc.uniform_blocks[0].glsl_uniforms[3].array_count = 0
        desc.uniform_blocks[0].glsl_uniforms[3].glsl_name = "_23.scz"
        desc.uniform_blocks[0].glsl_uniforms[4].type = .INT
        desc.uniform_blocks[0].glsl_uniforms[4].array_count = 0
        desc.uniform_blocks[0].glsl_uniforms[4].glsl_name = "_23.reverse_screen_y"
        desc.uniform_blocks[0].glsl_uniforms[5].type = .FLOAT4
        desc.uniform_blocks[0].glsl_uniforms[5].array_count = 16
        desc.uniform_blocks[0].glsl_uniforms[5].glsl_name = "_23.lights_pos"
        desc.images[0].stage = .FRAGMENT
        desc.images[0].multisampled = false
        desc.images[0].image_type = ._2D
        desc.images[0].sample_type = .FLOAT
        desc.samplers[0].stage = .FRAGMENT
        desc.samplers[0].sampler_type = .FILTERING
        desc.image_sampler_pairs[0].stage = .FRAGMENT
        desc.image_sampler_pairs[0].image_slot = 0
        desc.image_sampler_pairs[0].sampler_slot = 0
        desc.image_sampler_pairs[0].glsl_name = "tex_smp"
    }
    return desc
}
